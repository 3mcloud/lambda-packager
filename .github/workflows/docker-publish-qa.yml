name: Docker Publish QA
# Publish Images to DockerHub with 2 tags per image:
#  '<image>-qa', '<image>-<git_commit_sha>'
# on every branch push

on:
  push:
    branches:
      - "*"
env:
  IMAGE_NAME: lambda-packager
  REGISTRY: ghcr.io
  ORG: 3mcloud

jobs:
  build-python36-ghcr:
    runs-on: ubuntu-latest
    steps:
      - name: Git Checkout
        uses: actions/checkout@v2

      - name: Build image
        id: build_image
        run: docker build -t $IMAGE_NAME --no-cache -f python/3.6/Dockerfile python/.

      - name: Log into registry
        if: steps.build_image.outcome == 'success'
        run: echo "${{ secrets.PACKAGETOKEN }}" | docker login ghcr.io -u USERNAME --password-stdin

      - name: Push image
        run: |
          IMAGE_ID=${REGISTRY}/${ORG}/${IMAGE_NAME}
          docker image tag ${IMAGE_NAME} ${IMAGE_ID}:qa-python-3.6
          docker image tag ${IMAGE_NAME} ${IMAGE_ID}:qa-python-3.6-${{ github.sha }}
          docker image push --all-tags $IMAGE_ID

  build-python36:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout the code
      uses: actions/checkout@v2

    - name: Build and test python 3.6
      id: build_test
      run: make test VERSION=3.6

    - name: push
      if: steps.build_test.outcome == 'success'
      uses: elgohr/Publish-Docker-Github-Action@master
      with:
        name: 3mcloud/lambda-packager
        username: ${{ secrets.DOCKERHUBUSER }}
        password: ${{ secrets.DOCKERHUBPASS }}
        tags: "python-3.6-qa,python-3.6-${{ github.sha }}"
        context: python/.
        dockerfile: python/3.6/Dockerfile

  build-python37-ghcr:
    runs-on: ubuntu-latest
    steps:
      - name: Git Checkout
        uses: actions/checkout@v2

      - name: Build image
        id: build_image
        run: docker build -t $IMAGE_NAME --no-cache -f python/3.7/Dockerfile python/.

      - name: Log into registry
        if: steps.build_image.outcome == 'success'
        run: echo "${{ secrets.PACKAGETOKEN }}" | docker login ghcr.io -u USERNAME --password-stdin

      - name: Push image
        run: |
          IMAGE_ID=${REGISTRY}/${ORG}/${IMAGE_NAME}
          docker image tag ${IMAGE_NAME} ${IMAGE_ID}:qa-python-3.7
          docker image tag ${IMAGE_NAME} ${IMAGE_ID}:qa-python-3.7-${{ github.sha }}
          docker image push --all-tags $IMAGE_ID

  build-python37:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout the code
      uses: actions/checkout@v2

    - name: Build and test python 3.7
      id: build_test
      run: make test VERSION=3.7

    - name: push
      if: steps.build_test.outcome == 'success'
      uses: elgohr/Publish-Docker-Github-Action@master
      with:
        name: 3mcloud/lambda-packager
        username: ${{ secrets.DOCKERHUBUSER }}
        password: ${{ secrets.DOCKERHUBPASS }}
        tags: "python-3.7-qa,python-3.7-${{ github.sha }}"
        context: python/.
        dockerfile: python/3.7/Dockerfile

  build-python38-ghcr:
    runs-on: ubuntu-latest
    steps:
      - name: Git Checkout
        uses: actions/checkout@v2

      - name: Build image
        id: build_image
        run: docker build -t $IMAGE_NAME --no-cache -f python/3.8/Dockerfile python/.

      - name: Log into registry
        if: steps.build_image.outcome == 'success'
        run: echo "${{ secrets.PACKAGETOKEN }}" | docker login ghcr.io -u USERNAME --password-stdin

      - name: Push image
        run: |
          IMAGE_ID=${REGISTRY}/${ORG}/${IMAGE_NAME}
          docker image tag ${IMAGE_NAME} ${IMAGE_ID}:qa-python-3.8
          docker image tag ${IMAGE_NAME} ${IMAGE_ID}:qa-python-3.8-${{ github.sha }}
          docker image push --all-tags $IMAGE_ID

  build-python38:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout the code
      uses: actions/checkout@v2

    - name: Build and test python 3.8
      id: build_test
      run: make test VERSION=3.8

    - name: push
      if: steps.build_test.outcome == 'success'
      uses: elgohr/Publish-Docker-Github-Action@master
      with:
        name: 3mcloud/lambda-packager
        username: ${{ secrets.DOCKERHUBUSER }}
        password: ${{ secrets.DOCKERHUBPASS }}
        tags: "python-3.8-qa,python-3.8-${{ github.sha }}"
        context: python/.
        dockerfile: python/3.8/Dockerfile

  build-python39-ghcr:
    runs-on: ubuntu-latest
    steps:
      - name: Git Checkout
        uses: actions/checkout@v2

      - name: Build image
        id: build_image
        run: docker build -t $IMAGE_NAME --no-cache -f python/3.9/Dockerfile python/.

      - name: Log into registry
        if: steps.build_image.outcome == 'success'
        run: echo "${{ secrets.PACKAGETOKEN }}" | docker login ghcr.io -u USERNAME --password-stdin

      - name: Push image
        run: |
          IMAGE_ID=${REGISTRY}/${ORG}/${IMAGE_NAME}
          docker image tag ${IMAGE_NAME} ${IMAGE_ID}:qa-python-3.9
          docker image tag ${IMAGE_NAME} ${IMAGE_ID}:qa-python-3.9-${{ github.sha }}
          docker image push --all-tags $IMAGE_ID

  build-python39:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout the code
      uses: actions/checkout@v2

    - name: Build and test python 3.9
      id: build_test
      run: make test VERSION=3.9

    - name: push
      if: steps.build_test.outcome == 'success'
      uses: elgohr/Publish-Docker-Github-Action@master
      with:
        name: 3mcloud/lambda-packager
        username: ${{ secrets.DOCKERHUBUSER }}
        password: ${{ secrets.DOCKERHUBPASS }}
        tags: "python-3.9-qa,python-3.9-${{ github.sha }}"
        context: python/.
        dockerfile: python/3.9/Dockerfile

  build-node12x-ghcr:
    runs-on: ubuntu-latest
    steps:
      - name: Git Checkout
        uses: actions/checkout@v2

      - name: Build image
        id: build_image
        run: docker build -t $IMAGE_NAME --no-cache -f node/12.22/Dockerfile node/.

      - name: Log into registry
        if: steps.build_image.outcome == 'success'
        run: echo "${{ secrets.PACKAGETOKEN }}" | docker login ghcr.io -u USERNAME --password-stdin

      - name: Push image
        run: |
          IMAGE_ID=${REGISTRY}/${ORG}/${IMAGE_NAME}
          docker image tag ${IMAGE_NAME} ${IMAGE_ID}:node-12.22-qa
          docker image tag ${IMAGE_NAME} ${IMAGE_ID}:node-12.22-${{ github.sha }}
          docker image push --all-tags $IMAGE_ID

  build-node12x:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout the code
      uses: actions/checkout@v2

    - name: Build and test node 12.x
      id: build_test
      run: make test VERSION=12.22 RUNTIME=node

    - name: push
      if: steps.build_test.outcome == 'success'
      uses: elgohr/Publish-Docker-Github-Action@master
      with:
        name: 3mcloud/lambda-packager
        username: ${{ secrets.DOCKERHUBUSER }}
        password: ${{ secrets.DOCKERHUBPASS }}
        tags: "node-12.22-qa,node-12.22-${{ github.sha }}"
        context: node/.
        dockerfile: node/12.22/Dockerfile

  build-node14x-ghcr:
    runs-on: ubuntu-latest
    steps:
      - name: Git Checkout
        uses: actions/checkout@v2

      - name: Build image
        id: build_image
        run: docker build -t $IMAGE_NAME --no-cache -f node/14.18/Dockerfile node/.

      - name: Log into registry
        if: steps.build_image.outcome == 'success'
        run: echo "${{ secrets.PACKAGETOKEN }}" | docker login ghcr.io -u USERNAME --password-stdin

      - name: Push image
        run: |
          IMAGE_ID=${REGISTRY}/${ORG}/${IMAGE_NAME}
          docker image tag ${IMAGE_NAME} ${IMAGE_ID}:node-14.18-qa
          docker image tag ${IMAGE_NAME} ${IMAGE_ID}:node-14.18-${{ github.sha }}
          docker image push --all-tags $IMAGE_ID

  build-node14x:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout the code
      uses: actions/checkout@v2

    - name: Build and test node 14.x
      id: build_test
      run: make test VERSION=14.18 RUNTIME=node

    - name: push
      if: steps.build_test.outcome == 'success'
      uses: elgohr/Publish-Docker-Github-Action@master
      with:
        name: 3mcloud/lambda-packager
        username: ${{ secrets.DOCKERHUBUSER }}
        password: ${{ secrets.DOCKERHUBPASS }}
        tags: "node-14.18-qa,node-14.18-${{ github.sha }}"
        context: node/.
        dockerfile: node/14.18/Dockerfile
